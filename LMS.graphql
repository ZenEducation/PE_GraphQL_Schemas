enum LMS_CourseLevel {
  Beginner
  Intermediate
  Advanced
}
type LMS_Course_Duration {
  hours: Int
  min: Int
}
#models
type LMS_KnowledgeDomain @model @searchable{
  id: ID!
  name: String!
  description: String
  subDomain: [LMS_KnowledgeDomain] @hasMany #we can create as many subdomains as we want
  courses: [LMS_Course] @hasMany(indexName: "coursesByDomain")
}
type LMS_CourseTags @model @searchable {
  id: ID!
  label: String!
  courses: [LMS_Course] @manyToMany(relationName: "CourseTags")
}

type LMS_Course @model @searchable {
  id: ID!
  domainId: ID! @index(name: "coursesByDomain")
  name: String!
  description: String!
  shortDescription: String!
  thumbnailImageURL: String
  thumbnailVideoURL: String
  price: Int @default(value: "0")
  currentlyEnrolled: [Student] @manyToMany(relationName: "enrolledInCourse")
  studentsWhoCompletedThisCourse: [Student]
    @manyToMany(relationName: "studentsWhoCompletedThisCourse")
  exStudentsOfThisCourse: [Student]
    @manyToMany(relationName: "exStudentsOfThisCourse")
  currentlyEnrolledStudentsCount: Int
  allStudentsCount: Int
  courseReviewsRatings: Int
  avgStars: Float
  tags: [LMS_CourseTags] @manyToMany(relationName: "CourseTags")
  duration: LMS_Course_Duration!
  chapters: [LMS_Course_Chapter] @hasMany(indexName: "chapterByCourse")
  language: String
  deadline: AWSDate!
  courseLevel: LMS_CourseLevel
  reviews: [LMS_Course_Review] @hasMany(indexName: "reviewsByCourse")
  courseCreators: [LMSCourseInstructor] @manyToMany(relationName: "coursesByCreators") #courses created by user
}
type LMS_Course_Review @model {
  id: ID!
  rating: Int!
  content: String
  user: Student @hasOne
  courseId: ID! @index(name: "reviewsByCourse")
}
type LMS_Course_Chapter @model {
  id: ID!
  courseId: ID! @index(name: "chapterByCourse", sortKeyFields: ["title"])
  course: LMS_Course @belongsTo(fields: ["courseId"])
  title: String!
  description: String!
  videoUrl: String #if course creator no sections in chapters
  duration: Duration!
  visibility: Boolean
  previewLesson: Boolean #lesson will be available for preview without subscription
  quiz: [LMS_QuizQuestion] @hasMany(indexName: "MCQByQuiz")
  section: [LMS_Course_Section]
  attachments: String#links for pdf
  completedBy: [Student] @manyToMany(relationName: "chapterCompletedBy")
}

type LMS_Course_Section @model {
  title: String!
  description: String!
  duration: Duration
  videoUrl: String!
  attachments: String#links for pdf
}

type LMS_Quiz_Question @model 
@auth(
    rules: [
      { allow: owner } # Defaults to use the "owner" field
      { allow: private, operations: [update, read] }
    ]
  )
{
  id: ID!
  ChapterID: ID @index(name: "MCQByExam")
  question: String
  imageUrl: String #question can also include image or question can be in the form of image
  points: Int
  options: [LMS_Quiz_Option]! @hasMany(indexName: "optionsByMCQ")#for single and multiple choice questions
}
type LMS_Quiz_Option @model 
@auth(
    rules: [
      { allow: owner } # Defaults to use the "owner" field
      { allow: private, operations: [read] }
    ]
  )
{ #this fits for both multi-correct and single-correct quiz
  id: ID!
  questionid: ID! @index(name: "optionsByMCQ")
  key: Int #to separately identify the different options.
  image: String #if user contains image
  content: String!
  val: Boolean @default(value: "false") #default value should be in double quotes even for boolean:amplify-issue
}
type LMS_Quiz_Response @model 
@auth(
    rules: [
      { allow: owner } # Defaults to use the "owner" field
      { allow: private, operations: [update, read] }
    ]
  )
{
  userId: ID!
  chapterId: ID
  chapter: [MCQResponses] @hasMany(indexName: "userChapterResponses", fields: ["userId", "chapterId"])
  totalScore: Int
}

type LMS_Question_Response @model 
@auth(
    rules: [
      { allow: owner } # Defaults to use the "owner" field
      { allow: private, operations: [update, read] }
    ]
  )
  {
  id: ID!
  userId: ID!
    @index(name: "useChapterResponses", sortKeyFields: ["chapterId"])
  chapterId: ID!
  questionId: ID!
  question: LMS_Quiz_Question @hasOne(fields: ["questionId"])
  response: [Int] #will only contain keys options where student marked true
}
