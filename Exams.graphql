enum examQuestionType {

singleAnswerMCQ
multipleAnswerMCQ
TrueOrFalse
IntegerType
NumericalFloatingPointType

}

type MCQ @model{
    id: ID!
    examsID: ID @index(name: "MCQByExam")
    quizId: ID @index(name: "MCQByQuiz")
    question: String
    imageUrl: String
    points: Int
    options: [Option]! @hasMany(indexName: "optionsByMCQ")
}
type Option @model{#this fits for both multi-correct and single-correct quiz
    id: ID!
    MCQid: ID! @index(name: "optionsByMCQ")
    key: Int#to saperately identify the different options.
    content: String!
    val: Boolean!
}

type MCQResponses @model {
  id: ID!
  userId : ID! @index(name: "useChapterResponses", sortKeyFields: ["chapterId"]) @index(name: "userExamResponses", sortKeyFields: ["examId"])
  chapterId: ID 
  examId: ID 
  MCQId: ID!
  MCQ: MCQ @hasOne
  response: [Int]#will only contain keys options where student marked true
}

type ExamQuizResponses @model {
  userId: ID!
  chapterId: ID
  examId: ID
  chapter: [MCQResponses] @hasMany(indexName: "userChapterResponses", fields: ["userId", "chapterId"])
  chapters: [MCQResponses] @hasMany(indexName: "userChapterResponses", fields: ["userId"])
  exam: [MCQResponses] @hasMany(indexName: "userExamResponses", fields: ["userId", "examId"])
  exams: [MCQResponses] @hasMany(indexName: "userExamResponses", fields: ["userId"])
  totalScore: Int
}

type Exam @model
{
  id: ID!
  name: String!
  description: String
  startDate: AWSDate
  dueDate: AWSDate
  enrolled: [Student] @manyToMany(relationName: "enrolledForExam")
  attempted: [Student] @manyToMany(relationName: "examsAttemped")
  questions: Int
  passingMarks: Int
  MCQs: [MCQ] @hasMany(indexName: "MCQByExam")
}

