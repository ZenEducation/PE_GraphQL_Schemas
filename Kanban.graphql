enum Kanban_StatusType {
  InProgress
  Pending
  InReview
  Success
}
enum Kanban_Priority {
  Highest
  High
  Low
  Lowest
}
enum Kanban_ActivityType {
  Alert
  Event
}
enum Kanban_TaskType {
  Create
  Update
  Performance
  Design
  Support
  Backup
}

type Kanban_Task_Checklist {
  name: String!
  val: Boolean!
}

#Activity type
type Kanban_Activity_Alert {
  icon: String
  title: String
  description: String
}
type Kanban_Activity_Event {
  icon: String
  title: String
  date: AWSDate
  startTime: AWSDateTime!
  endTime: AWSDateTime!
}
#models
type Kanban_Project 
@auth(rules: [
{ allow: owner }, # Defaults to use the "owner" field
{ allow: owner, ownerField: "users", operations: [update, read, delete] }])
@model
{
  id:ID!
  name: String!
  description: String!
  users: [User] @manyToMany(relationName: "userProjects")
  tasks: [Kanban_Task] @hasMany(indexName: "taskByProject", fields: ["id"])
  Activity: [Kanban_Activity] @hasMany(indexName: "activityByProject", fields: ["id"])
}
type Kanban_Task 
@auth(rules: [
{ allow: owner }, # Defaults to use the "owner" field
{ allow: owner, ownerField: "assignees", operations: [update, read, delete] }])
@model
{
  id: ID!
  projectId: ID! @index(name: "taskByProject")
  name: String!
  description: String
  icon: String
  type: Kanban_TaskType!
  images: [String]
  tags: [String]
  assignees: [User] @manyToMany(relationName: "userAssignedTasks")
  status: Kanban_StatusType!
  dueAt: AWSDate
  totalSubtasks: Int
  subtasksCompleted: Int
  priority: Priority
  checklist: [Kanban_Task_Checklist]
  Creator: String
  comments: [Kanban_Task_Comment] @hasMany(indexName: "byTask", fields: ["id"])
}

type Kanban_Task_Comment 
@auth(rules: [
{ allow: owner }, # Defaults to use the "owner" field
{ allow: private, operations: [read] }])
@model
{
  id: ID!
  taskId: ID! @index(name: "byTask")
  content: String!
  images: [String]
  userId: ID!
  creator: User @hasOne(fields: ["userId"])
}

type Kanban_Activity 
@auth(rules: [
{ allow: owner }, # Defaults to use the "owner" field
{ allow: private, operations: [update, read] }])
@model
{
  userId: ID!
  creator: User @hasOne(fields: ["userId"])
  projectId: ID! @index(name: "activityByProject")
  type: Kanban_ActivityType!
  alert: Alert
  event: Event
  readBy: [User] @hasMany
}
